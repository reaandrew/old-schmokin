#! /bin/bash

export RED='\033[0;31m' export NC='\033[0m' # No Color
export GREEN='\033[0;32m'

CURL_HTTP_SED="s/ ([A-Z]{3,6}) ([a-zA-Z0-9/\.\_\~\:\/\?\#\!\$\&\(\)\*\+\,\\\;]+) HTTP\/1.1/\1,\2/p"

width=75
data=$(cat /dev/stdin)


method=$(echo "$data" | sed -rn "$CURL_HTTP_SED"  | cut -d, -f1)
path=$(echo "$data" | sed -rn "$CURL_HTTP_SED" | cut -d, -f2)

fail=0

printf '%s %s\n' $method $path
printf '%0.1s' "-"{1..85}
printf '\n'

echo "method $method"

jqexpr=''
jqvalue=''

value_function(){
    echo "EMPTY"
}

json_function(){
    echo $()
}

STATEMENT=""
RESULT=""

delegate_function=value_function

while [ -n "$1" ]; do
    case "$1" in
    --status-code|-s )
            actual=$(echo "$data" | sed -rn 's/.*HTTP\/1.[0-9].*([0-9]{3}).*/\1/p' | sed 's/\r//g')
            STATEMENT="expected status code = $2 actual $actual"
            if echo "$data" | grep -q "HTTP/1.[0-9] $2";
            then
              printf "%-${width}s [${GREEN}%s${NC}]\n" "$STATEMENT" "PASS"
            else 
              printf "%-${width}s [${RED}%s${NC}]\n" "$STATEMENT" "FAIL"
              fail=1
            fi
            MODE="$1 $2"
            shift
            ;;
    --jq-expr)
        STATEMENT=$2
        JSON=$(echo "$data" | grep "\{\|\[")
        RESULT=$(echo $JSON | jq "$2" | sed 's/\"//g')
       ;;
    --eq)
        msg="expected ${STATEMENT:0:60} = $2 actual $RESULT"
        if [ "$RESULT" = "$2" ];
        then
         printf "%-${width}s [${GREEN}%s${NC}]\n" "$msg" "PASS"
        else
         fail=1
         printf "%-${width}s [${RED}%s${NC}]\n" "$msg" "FAIL"
        fi
       ;;
    --gt)
        msg="expected ${STATEMENT:0:60} > $2 actual $RESULT"
        if [ "$RESULT" -gt "$2" ];
        then
         printf "%-${width}s [${GREEN}%s${NC}]\n" "$msg" "PASS"
        else
         fail=1
         printf "%-${width}s [${RED}%s${NC}]\n" "$msg" "FAIL"
        fi
       ;;
    "--clean" )
			echo "clean"
            CLEAN="$1"
            ;;
    esac
    shift
done

printf '%0.1s' "-"{1..85}
printf '\n'
if [ "$fail" = "1" ];
then
    printf "%-${width}s [${RED}%s${NC}]\n\n" "RESULT" "FAILURE"
    exit $fail
else
    printf "%-${width}s [${GREEN}%s${NC}]\n\n" "RESULT" "SUCCESS"
    exit 0
fi

