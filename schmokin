#! /bin/bash

if [[ -p /dev/stdin ]]
then
    export DATA=$(cat /dev/stdin)
fi

VERSION=VERSION_HERE #Reaplced at build time 
RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CURL_HTTP_SED="s/^> ([A-Z]{3,6}) ([a-zA-Z0-9/\.\_\~\:\/\?\#\!\$\&\(\)\*\+\,\\\;]+) HTTP\/1.1/\1,\2/p"
WIDTH=75
FAILED=0
HTTP_METHOD=$(echo "$DATA" | sed -rn "$CURL_HTTP_SED"  | cut -d, -f1)
HTTP_PATH=$(echo "$DATA" | sed -rn "$CURL_HTTP_SED" | cut -d, -f2)
RESULT=""

HEADING(){
    printf "${BLUE}%s %s${NC}\n" $1
    printf '%0.1s' "-"{1..85}
    printf '\n'
}

PASS(){
    printf "%-${WIDTH}s [${GREEN}%s${NC}]\n" "$1" "${2:-PASS}"
}

FAIL(){
    printf "%-${WIDTH}s [${RED}%s${NC}]\n" "$1" "${2:-FAIL}"
    FAILED=1
}

HEADING "$HTTP_METHOD $HTTP_PATH"

while [ -n "$1" ]; do
    case "$1" in
    --status-code|-s )
            actual=$(echo "$DATA" | sed -rn 's/.*HTTP\/1.[0-9].*([0-9]{3}).*/\1/p' | sed 's/\r//g')
            msg=$(printf "expected status code = %s actual %s" $2 $actual)
            if echo "$DATA" | grep -q "HTTP/1.[0-9] $2";
            then
              PASS "${msg}" "PASS"
            else 
              FAIL "$msg" "FAIL"
            fi
            shift
            ;;
    --jq-expr)
        msg=$2
        JSON=$(echo "$DATA" | tail -n -1) 
        RESULT=$(echo $JSON | jq "$2" | sed 's/\"//g')
        shift
       ;;
    --eq)
        msg="expected ${msg:0:60} = $2 actual $RESULT"
        if [ "$RESULT" = "$2" ];
        then
         PASS "$msg" "PASS"
        else
         FAIL "$msg" "FAIL"
        fi
        shift
       ;;
    --gt)
        msg="expected ${msg:0:60} > $2 actual $RESULT"
        if [ "$RESULT" -gt "$2" ];
        then
         PASS "$msg" "PASS"
        else
         FAIL "$msg" "FAIL"
        fi
        shift
       ;;
    --ge)
        msg="expected ${msg:0:60} >= $2 actual $RESULT"
        if [ "$RESULT" -ge "$2" ];
        then
         PASS "$msg" "PASS"
        else
         FAIL "$msg" "FAIL"
        fi
        shift
       ;;
    --lt)
        msg="expected ${msg:0:60} < $2 actual $RESULT"
        if [ "$RESULT" -lt "$2" ];
        then
         PASS "$msg" "PASS"
        else
         FAIL "$msg" "FAIL"
        fi
        shift
       ;;
    --le)
        msg="expected ${msg:0:60} <= $2 actual $RESULT"
        if [ "$RESULT" -le "$2" ];
        then
         PASS "$msg" "PASS"
        else
         FAIL "$msg" "FAIL"
        fi
        shift
       ;;
    --resp-header)
        EXPECTED=$2
        RESULT=$(echo "$DATA" \
            | tr -d ' ' | grep "<$EXPECTED.*" | cut -d: -f2 | sed 's/\r//g')
        shift
        ;;
    --req-header)
        EXPECTED=$2
        RESULT=$(echo "$DATA" \
            | tr -d ' ' | grep ">$EXPECTED.*" | cut -d: -f2 | sed 's/\r//g')
        shift
        ;;
    --contains)
        msg="expected ${RESULT:0:30} to contain ${2:0:30}"
        if  echo "$RESULT" | grep -q "$2";
        then
         PASS "$msg" "PASS"
        else
         FAIL "$msg" "FAIL"
        fi
        shift
       ;;
    -v )
		echo "version $VERSION"
        exit 0
        ;;
    * )
        FAIL "Unkonwn arg [$1]" "ERROR"
        exit 1
        ;;
    esac
    shift
done

printf '%0.1s' "-"{1..85}
printf '\n'
if [ "$FAILED" = "1" ];
then
    FAIL "RESULT" "FAILURE"
    exit $FAILED
else
    PASS "RESULT" "SUCCESS"
    exit 0
fi

