#! /bin/sh
# file: examples/equality_test.sh

python schmokin_test_server.py >/dev/null 2>&1 /dev/null &
sleep 1
pid=$!

ENDPOINT=http://localhost:40000
oneTimeTearDown(){
    kill $pid
}

# NOTE ABOUT ASSERTIONS
# ---------------------------------------------------------
# The following tests assert on the variable $? which
# is the return code of the previous command
# ---------------------------------------------------------

testAssertingOnStatusCode() {
    curl -vs $ENDPOINT/simple 2>&1 | \
        ./schmokin -s 200

    assertEquals 0 $?
}

testAssertingOnStatusCode_Fails() {
    curl -vs $ENDPOINT/simple 2>&1 | \
        ./schmokin -s 201

    assertEquals 1 $?
}

testAssertingEQ() {
    curl -vs $ENDPOINT/simple 2>&1 | \
        ./schmokin --jq-expr '.status' --eq "UP"

    assertEquals 0 $?
}

testAssertingEQ_Fails() {
    curl -vs $ENDPOINT/simple 2>&1 | \
        ./schmokin --jq-expr '.status' --eq "DOWN"

    assertEquals 1 $?
}

testAssertingGT() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --gt 4

    assertEquals 0 $?
}

testAssertingGT_Fails() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --gt 6

    assertEquals 1 $?
}


testAssertingGT_Fails() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --gt 6

    assertEquals 1 $?
}

testAssertingGTE_Equals() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --ge 5

    assertEquals 0 $?
}

testAssertingGTE_Greater() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --ge 4

    assertEquals 0 $?
}

testAssertingGTE_Fails() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --ge 6

    assertEquals 1 $?
}

testAssertingMultipleTimes() {
    curl -vs $ENDPOINT/array 2>&1 | \
        ./schmokin --jq-expr '. | length' --gt 4 \
        -s 200

    assertEquals 0 $?
}

# Load shUnit2.
. ./shunit2-2.1.7/shunit2

